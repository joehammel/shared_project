from json import dumps
from logging import info
from tornado.escape import json_decode, utf8
from tornado.gen import coroutine

from .base import BaseHandler
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms
key = "thebestsecretkeyintheentireworld"
key_bytes = bytes(key, "utf-8")
nonce_bytes = os.urandom(16)
nonce=nonce_bytes.hex()

chacha20_cipher = Cipher(algorithms.ChaCha20(key_bytes, nonce_bytes),
                         mode=None)
chacha20_encryptor = chacha20_cipher.encryptor()
chacha20_decryptor = chacha20_cipher.decryptor()





class RegistrationHandler(BaseHandler):

    @coroutine
    def post(self):
        try:
            body = json_decode(self.request.body)
            email = body['email'].lower().strip()
            email_bytes = bytes(email, "utf-8")
            emailx = chacha20_encryptor.update(email_bytes)
            emailx_hex = emailx.hex()
            if not isinstance(email, str):
                raise Exception()
            password = body['password']
            if not isinstance(password, str):
                raise Exception()
            display_name =body.get('displayName')
            if display_name is None:
                display_name = email
            if not isinstance(display_name, str):
                raise Exception()
        except Exception as e:
            self.send_error(400, message='**You must provide an email address, password and display name!**')
            return

        if not email:
            self.send_error(400, message='**The email address is invalid!**')
            return

        if not password:
            self.send_error(400, message='**The password is invalid!**')
            return

        if not display_name:
            self.send_error(400, message='**The display name is invalid!**')
            return

        user = yield self.db.users.find_one({
          'email': email
        }, {})

        if user is not None:
            self.send_error(409, message='**A user with the given email address already exists!**')
            return

        yield self.db.users.insert_one({
            'email': emailx_hex,
            'password': password,
            'displayName': display_name
        })


        self.set_status(200)
        self.response['email'] = email
        self.response['displayName'] = display_name
        self.response['nonce'] = nonce

        self.write_json()